#ifndef Байкал
#define Байкал

#define вперёд_славяне 

#ifdef _WIN32
#include <Windows.h>
#define вперёд_славяне SetConsoleOutputCP(1251)
#else
#include <unistd.h>
#define вперёд_славяне
#endif

#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <ctime>

#define царь_батюшка_главный int main
#define внедрить using
#define обозвать typedef
#define Русь std
#define молвить cout
#define внемлить cin
#define воздать return

#define пахать do
#define покуда while
#define для for

#define коли if
#define отнюдь else

#define династия class
#define семейство struct
#define перепись enum

#define бить_ящеров break
#define добить_ящеров continue
#define путевой_камень switch
#define путь case
#define базированно default

#define правда true
#define кривда false

#define прыг_скок endl
#define новь new
#define казнь delete
#define туда_не_знаю_куда nullptr
#define НИЧТО NULL
#define судьба rand
#define судьбоносный srand
#define в_строченьку to_string
#define ширь setw
#define приказ_княжий const
#define мощь pow
#define получи_басурман throw
#define гнев_Перуна exception
#define читать_летопись ifstream
#define писать_летопись ofstream
#define летопись fstream
#define друже friend
#define окстись goto
#define свет_мой_зеркальце template
#define скажи typename
#define царский private
#define народный public
#define дружинный protected
#define встрой inline
#define кощей static
#define однобокий unsigned
#define руна unsigned char
#define местный this
#define пытать_ящера try
#define поймать_ящера catch
#define хутор namespace
#define откупорить open
#define закупорить close
#define суд_Перуна auto
#define аки static_cast
#define очами_стрельнуть peek
#define двойня pair
#define старший first
#define младший second
#define оператор operator
#define двинуть move

#define беда exception
#define что_случилось what

#define времечко time

#define читать read
#define зачерпнуть getline
#define добрый_молодец good
#define змей_подколодный fail
#define вот_и_сказочке_конец eof
#define вск eof
#define приток_Байкала ostream
#define отток_Байкала istream
#define меняло swap
#define отщипнуть get

внедрить целина = int;
внедрить вель_дробь = double;
внедрить малый_дробь = float;
внедрить буква = char;
внедрить много_букав = Русь::string;
внедрить бестолочь = void;
внедрить карлик = short;
внедрить долговязый = long;
внедрить Петр_Первый = long long;
внедрить мерило = size_t;
внедрить розсуд = bool;

внедрить однобокая_целина = unsigned int;
внедрить однобокая_буква = unsigned char;
внедрить однобокий_карлик = unsigned short;
внедрить однобокий_долговязый = unsigned long;
внедрить однобокий_Петр_Первый = unsigned long long;


перепись счёт_древних_русов{ ноль = 0, целковый = 1, полушка = 2, четвертушка = 3, осьмушка = 4,
пудовичок = 5, медячок = 6, серебрячок = 7, золотничок = 8, девятичок = 9, десятичок = 10 };


#include <queue>

#define очередь queue
#define крайний back
#define разместить emplace
#define пуста empty
#define первый front
#define отрезать pop
#define приклеить push
#define размер size
#define взять_сосуд _Get_container

хутор Сибирь
{
	свет_мой_зеркальце <скажи Тип>
	семейство звено
	{
		Тип ключик;
		мерило высота;
		звено<Тип>* лево;
		звено<Тип>* право;
		звено(Тип ключик) : ключик(ключик), лево(туда_не_знаю_куда), право(туда_не_знаю_куда), высота(1) {}
	};

	свет_мой_зеркальце <скажи Тип>
	династия РавнобокоеДрево
	{
	царский:
		звено<Тип>* корневище;

		целина условие_выравнивания(звено<Тип>* корешок);

		бестолочь пересчитать_высоту(звено<Тип>* корешок);

		звено<Тип>* повернуть_направо(звено<Тип>* корешок);

		звено<Тип>* повернуть_налево(звено<Тип>* корешочек);

		звено<Тип>* выровнять(звено<Тип>* корешок);

		звено<Тип>* найти_и_выкорчевать_меньший(звено<Тип>* корешок, звено<Тип>*& меньший);

		звено<Тип>* выкорчевать_по_ключику(звено<Тип>* корешок, Тип ключик);

		звено<Тип>* вставка(звено<Тип>* корешок, Тип ключик);

		звено<Тип>* отпочковать(звено<Тип>* корневище);

	народный:
		РавнобокоеДрево() : корневище(туда_не_знаю_куда) {}

		РавнобокоеДрево(приказ_княжий РавнобокоеДрево<Тип>& засланец);

		РавнобокоеДрево<Тип>& оператор = (приказ_княжий РавнобокоеДрево<Тип>&засланец);

		РавнобокоеДрево(РавнобокоеДрево<Тип>&& засланец);

		РавнобокоеДрево<Тип>& оператор = (РавнобокоеДрево<Тип> && засланец);

		~РавнобокоеДрево()
		{
			вырубить(корневище);
		}

		бестолочь вырубить(звено<Тип>*& корешок);

		звено<Тип>*& выкопать_корневище()
		{
			воздать корневище;
		}

		бестолочь посадить_корневище(звено<Тип>* корневище)
		{
			местный->корневище = корневище;
		}

		мерило высота();

		бестолочь прирастить(Тип ключик);

		бестолочь выкорчевать(Тип ключик);

		розсуд растет_ли(Тип ключик);
	};

	свет_мой_зеркальце <скажи Тип>
	целина РавнобокоеДрево<Тип>::условие_выравнивания(звено<Тип>* корешок)
	{
		воздать(корешок->право ? корешок->право->высота : 0) - (корешок->лево ? корешок->лево->высота : 0);
	}

	свет_мой_зеркальце <скажи Тип>
	бестолочь РавнобокоеДрево<Тип>::пересчитать_высоту(звено<Тип>* корешок)
	{
		однобокая_буква выс_лев = корешок->лево ? корешок->лево->высота : 0;
		однобокая_буква выс_прав = корешок->право ? корешок->право->высота : 0;
		корешок->высота = (выс_лев > выс_прав ? выс_лев : выс_прав) + 1;
	}

	свет_мой_зеркальце <скажи Тип>
	звено<Тип>* РавнобокоеДрево<Тип>::повернуть_направо(звено<Тип>* корешок)
	{
		звено<Тип>* корешочек = корешок->лево;
		корешок->лево = корешочек->право;
		корешочек->право = корешок;
		пересчитать_высоту(корешок);
		пересчитать_высоту(корешочек);
		воздать корешочек;
	}

	свет_мой_зеркальце <скажи Тип>
	звено<Тип>* РавнобокоеДрево<Тип>::повернуть_налево(звено<Тип>* корешочек)
	{
		звено<Тип>* корешок = корешочек->право;
		корешочек->право = корешок->лево;
		корешок->лево = корешочек;
		пересчитать_высоту(корешочек);
		пересчитать_высоту(корешок);
		воздать корешок;
	}

	свет_мой_зеркальце <скажи Тип>
	звено<Тип>* РавнобокоеДрево<Тип>::выровнять(звено<Тип>* корешок)
	{
		пересчитать_высоту(корешок);
		коли(условие_выравнивания(корешок) == 2)
		{
			коли(условие_выравнивания(корешок->право) < 0)
				корешок->право = повернуть_направо(корешок->право);
			воздать повернуть_налево(корешок);
		}
		коли(условие_выравнивания(корешок) == -2)
		{
			коли(условие_выравнивания(корешок->лево) > 0)
				корешок->лево = повернуть_налево(корешок->лево);
			воздать повернуть_направо(корешок);
		}
		воздать корешок;
	}

	свет_мой_зеркальце <скажи Тип>
	звено<Тип>* РавнобокоеДрево<Тип>::найти_и_выкорчевать_меньший(звено<Тип>* корешок, звено<Тип>*& меньший)
	{
		коли(!корешок->лево)
		{
			меньший = корешок;
			воздать корешок->право;
		}
		корешок->лево = найти_и_выкорчевать_меньший(корешок->лево, меньший);
		воздать выровнять(корешок);
	}

	свет_мой_зеркальце <скажи Тип>
	звено<Тип>* РавнобокоеДрево<Тип>::выкорчевать_по_ключику(звено<Тип>* корешок, Тип ключик)
	{
		коли(!корешок)
			воздать туда_не_знаю_куда;
		коли(ключик < корешок->ключик)
			корешок->лево = выкорчевать_по_ключику(корешок->лево, ключик);
		отнюдь коли(ключик > корешок->ключик)
			корешок->право = выкорчевать_по_ключику(корешок->право, ключик);
		отнюдь
		{
		  звено<Тип>*левый_корешок = корешок->лево;
		  звено<Тип>* правый_корешок = корешок->право;
		  казнь корешок;
		  коли(!правый_корешок)
			воздать левый_корешок;
		  звено<Тип>* меньший;
		  звено<Тип>* меньший_справа = найти_и_выкорчевать_меньший(правый_корешок, меньший);
		  меньший->право = меньший_справа;
		  меньший->лево = левый_корешок;
		  воздать выровнять(меньший);
		}
		воздать выровнять(корешок);
	}

	свет_мой_зеркальце <скажи Тип>
	звено<Тип>* РавнобокоеДрево<Тип>::вставка(звено<Тип>* корешок, Тип ключик)
	{
		коли(!корешок)
			воздать новь звено<Тип>(ключик);
		коли(ключик < корешок->ключик)
			корешок->лево = вставка(корешок->лево, ключик);
		отнюдь
			корешок->право = вставка(корешок->право, ключик);
		воздать выровнять(корешок);
	}

	// копия поддрева
	свет_мой_зеркальце <скажи Тип>
	звено<Тип>* РавнобокоеДрево<Тип>::отпочковать(звено<Тип>* корневище)
	{
		звено<Тип>* итог = туда_не_знаю_куда;
		коли(корневище)
		{
			итог = новь звено<Тип>(корневище->ключик);
			итог->лево = отпочковать(корневище->лево);
			итог->право = отпочковать(корневище->право);
		}
		воздать итог;
	}

	// конструктор копирования
	свет_мой_зеркальце <скажи Тип>
	РавнобокоеДрево<Тип>::РавнобокоеДрево<Тип>(приказ_княжий РавнобокоеДрево<Тип>& засланец)
	{
		корневище = отпочковать(засланец.корневище);
	}

	свет_мой_зеркальце <скажи Тип>
	РавнобокоеДрево<Тип>& РавнобокоеДрево<Тип>::оператор = (приказ_княжий РавнобокоеДрево<Тип>&засланец)
	{
		коли(местный != &засланец)
		{
			вырубить(корневище);
			корневище = отпочковать(засланец.корневище);
		}
		воздать * местный;
	}

		// конструктор перемещения
		свет_мой_зеркальце <скажи Тип>
		РавнобокоеДрево<Тип>::РавнобокоеДрево<Тип>(РавнобокоеДрево<Тип>&& засланец)
		{
			корневище = засланец.корневище;
			засланец.корневище = туда_не_знаю_куда;
		}

		свет_мой_зеркальце <скажи Тип>
		РавнобокоеДрево<Тип>& РавнобокоеДрево<Тип>::оператор = (РавнобокоеДрево<Тип> && засланец)
		{
			коли(местный != &засланец)
			{
				вырубить(корневище);
				корневище = засланец.корневище;
				засланец.корневище = туда_не_знаю_куда;
			}
			воздать * местный;
		}

			// удалить поддрево
			свет_мой_зеркальце <скажи Тип>
			бестолочь РавнобокоеДрево<Тип>::вырубить(звено<Тип>*& корешок)
			{
				коли(корешок)
				{
					вырубить(корешок->лево);
					вырубить(корешок->право);
					казнь корешок;
					корешок = туда_не_знаю_куда;
				}
			}

			свет_мой_зеркальце <скажи Тип>
			мерило РавнобокоеДрево<Тип>::высота()
			{
				воздать корневище ? корневище->высота : 0;
			}

			// добавление элемента
			свет_мой_зеркальце <скажи Тип>
			бестолочь РавнобокоеДрево<Тип>::прирастить(Тип ключик)
			{
				корневище = вставка(корневище, ключик);
			}

			// удаление элемента по ключику
			свет_мой_зеркальце <скажи Тип>
			бестолочь РавнобокоеДрево<Тип>::выкорчевать(Тип ключик)
			{
				корневище = выкорчевать_по_ключику(корневище, ключик);
			}

			// включает ли древо элемент
			свет_мой_зеркальце <скажи Тип>
			розсуд РавнобокоеДрево<Тип>::растет_ли(Тип ключик)
			{
				звено<Тип>* корешочек = корневище;
				покуда(корешочек)
				{
					коли(ключик < корешочек->ключик)
						корешочек = корешочек->лево;
					отнюдь коли(ключик > корешочек->ключик)
						корешочек = корешочек->право;
					отнюдь
						воздать правда;
				}
				воздать кривда;
			}
}

#endif
